import  telebot
from telebot import types
import config
import random
import bd
import jsonNews

bot = telebot.TeleBot(config.TOKEN)


#Telebot: Welcome message /start

@bot.message_handler(commands=['start'])
def welcome(message):
    sti= open('static/welcome.webp', 'rb')
    bot.send_sticker(message.chat.id,sti)
    bot.send_message(message.chat.id,"–ó–¥–∞—Ä–æ–≤–∞, <b> –¥—Ä—É–∂–∏—â–µ </b>. \n  –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å".format(message.from_user, bot.get_me()),parse_mode='html')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1= types.KeyboardButton("–ü—Ä–∏–≤–µ—Ç")
    item2= types.KeyboardButton("üì∞  –ù–æ–≤–æ—Å—Ç–∏")
    item3= types.KeyboardButton("üé≤  –†–∞–Ω–¥–æ–º")
    markup.add(item1,item2,item3)
    if bd.HasUser(message.chat.id):
        subs=bd.getSubsByUserID(message.chat.id)
        if subs:
            catId=[]
            for i in range(len(subs)):
                catId.insert(i,subs[i][0])
            news(message,catId)
    bot.send_message(message.chat.id,"–ß—Ç–æ –Ω–∞–¥–æ?",reply_markup=markup)

def news(message,catId):
    dataFetch=jsonNews.getNews()
    bot.send_message(message.chat.id,"–ü–æ–¥–ø–∏—Å–∫–∏")
    for i in range(len(dataFetch)):
        #print(dataFetch[i]['category'],catId)
        if dataFetch[i]['category'] in catId:
            bot.send_message(message.chat.id,dataFetch[i]['title']+"\n"+dataFetch[i]['img']+"\n"+dataFetch[i]['description'])
        #print(dataFetch[i]['title'])
    


#Telebot: What do you want?

@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type=="private":
        getMsgTOLower=message.text.lower()
        if message.text in config.command["hello"]:
            bot.send_message(message.chat.id, message.text)
        elif message.text in config.command["news"]:
            bot.send_message(message.chat.id,'–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ù–æ–≤–æ—Å—Ç–∏"...')
            sti= open('static/bruh.webp', 'rb')
            bot.send_sticker(message.chat.id,sti)
            markup2=types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",callback_data='reg')
            item2 = types.InlineKeyboardButton("–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç",callback_data='enter')
            markup2.add(item1,item2)
            bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup2)
        elif getMsgTOLower in config.food:
            bot.send_message(message.chat.id,config.food[getMsgTOLower])
        elif message.text in config.command["random"]:
            bot.send_message(message.chat.id,str(random.randint(0,100)))
        elif getMsgTOLower in config.command["help"]:
            bot.send_message(message.chat.id,config.help_message)
        elif bd.getUserByID(message.chat.id) and config.s_regin=="protected":
            getCategory = bd.getAllCategories()
            if message.text in getCategory:
                bot.send_message(message.chat.id,bd.insertSub(message.chat.id,message.text))
            if getMsgTOLower in config.command["delete"]:
                delete(message)
        else:
            bot.send_message(message.chat.id,"–•–ó! –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è üòñ \n  –î–µ—Ä–∂–∏ üç∫ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç \n –ò–ª–∏ –ø—Ä–æ–ø–∏—à–∏ '/help' ")
        

#Telebot: InlineKeyboard
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    User = bd.HasUser(call.from_user.id)
    try:
        if call.message:
            if call.data=='reg':
                
                if(len(User)==0):
                    bot.send_message(call.from_user.id,"–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
                    markup3=types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("–î–∞",callback_data='yes')
                    item2 = types.InlineKeyboardButton("–ù–µ—Ç",callback_data='no')
                    markup3.add(item1,item2)
                    bot.send_message(call.from_user.id,'–í—ã –≥–æ—Ç–æ–≤—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ? ', reply_markup=markup3)
                else:
                    bot.send_message(call.from_user.id,"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Ç–∏")
            elif call.data=='enter':
                bot.send_message(call.from_user.id,"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: ")
                bot.register_next_step_handler(msg, Auth)

            elif call.data in bd.getAllCategoriesID():
                cat=bd.getSubsByUserID(call.from_user.id)
                print(bd.getAllCategoriesID())
                if len(cat)>0 and len(User)>0:
                    for i in range(len(cat)):
                        if f"{call.data}" == f"{cat[i][0]}":
                            bot.send_message(call.from_user.id,bd.deleteSub(call.data,call.from_user.id))
                else:
                    bot.send_message(call.from_user.id,"–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫")
                
                msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: ")
                config.s_regin="public"
                bot.register_next_step_handler(msg, Auth)
            else:
                bot.send_message(call.from_user.id,"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
            if call.data=="yes":
                bot.send_message(call.from_user.id,"–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–æ–ª—è. ")
                msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: ")
                bot.register_next_step_handler(msg, Take_Token)
            elif call.data=="no":  
                bot.send_message(call.from_user.id,"–•–æ—Ä–æ—à–æ. –¢–æ–≥–¥–∞ –ø–æ—Ç–æ–º. üò∏")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å...", reply_markup=None )
        
        
    except Exception as e:
        print(repr(e))

#Telebot: Check In
def Take_Token(message):
    msg = format(message.text)
    bot.send_message(message.chat.id, bd.insertUser(message.chat.id,msg))
    YourNews(message)

#Telebot: Auth
def Auth(message):
    msg = format(message.text)
    response=bd.authUser(message.chat.id,msg)
    if(response):
        YourNews(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ–¥—ë–Ω –ø–∞—Ä–æ–ª—å")

#Telebot: Newsroom Enter
def YourNews(message):
    config.s_regin="protected"
    
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    getCategory = bd.getAllCategories()
    for item in getCategory:
        markup.add(types.KeyboardButton(item))
    markup.add(types.KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
    bot.send_message(message.chat.id, "–í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: ", reply_markup=markup)

def delete(message):
    getCategoryByID = bd.getSubsByUserID(message.chat.id)
    if len(getCategoryByID)>0:
        markup3=types.InlineKeyboardMarkup(row_width=len(getCategoryByID))
        for i in range(len(getCategoryByID)):
            markup3.add(types.InlineKeyboardButton(getCategoryByID[i][1],callback_data=getCategoryByID[i][0]))
        bot.send_message(message.chat.id,"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è", reply_markup=markup3)
    else: 
        bot.send_message(message.chat.id,"–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: ")
        config.s_regin="public"
        bot.register_next_step_handler(msg, Auth)

    
  

bot.polling(non_stop=True)


